
import React, { useState } from 'react';
import { Card } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Loader, Search, AlertTriangle, Shield, Database, Info, CheckCircle2 } from 'lucide-react';
import { supabase } from '@/integrations/supabase/client';
import { toast } from "sonner";
import { Badge } from '@/components/ui/badge';
import { useAuth } from '@/hooks/useAuth';
import { Alert } from '@/components/ui/alert';
import { Progress } from '@/components/ui/progress';

interface VulnerabilityScraperProps {
  onScanComplete?: () => void;
}

interface ScanSource {
  id: string;
  name: string;
  icon: React.ReactNode;
  description: string;
}

const VulnerabilityScraper: React.FC<VulnerabilityScraperProps> = ({ onScanComplete }) => {
  const { user } = useAuth();
  const [isLoading, setIsLoading] = useState(false);
  const [progress, setProgress] = useState(0);
  const [selectedSource, setSelectedSource] = useState<string>('nvd');
  const [results, setResults] = useState<any[]>([]);
  const [scanInProgress, setScanInProgress] = useState(false);
  const [scanComplete, setScanComplete] = useState(false);

  const sources: ScanSource[] = [
    { 
      id: 'nvd', 
      name: 'NVD Database', 
      icon: <Database className="h-4 w-4 mr-2" />,
      description: 'National Vulnerability Database - Official US government repository of standards based vulnerability data'
    },
    { 
      id: 'cveDetails', 
      name: 'CVE Details', 
      icon: <Shield className="h-4 w-4 mr-2" />,
      description: 'Comprehensive database with detailed information on security vulnerabilities'
    },
    { 
      id: 'cisaKev', 
      name: 'CISA Known Exploited Vulnerabilities', 
      icon: <AlertTriangle className="h-4 w-4 mr-2" />,
      description: 'Catalog of known exploited vulnerabilities from the Cybersecurity & Infrastructure Security Agency'
    }
  ];

  const handleScrape = async () => {
    try {
      setIsLoading(true);
      setScanInProgress(true);
      setScanComplete(false);
      setResults([]);
      setProgress(10);

      // Update progress to simulate stages of scanning
      const progressInterval = setInterval(() => {
        setProgress(prev => {
          if (prev >= 90) {
            clearInterval(progressInterval);
            return 90;
          }
          return prev + 10;
        });
      }, 700);

      const { data, error } = await supabase.functions.invoke('scrape-vulnerabilities', {
        body: { 
          source: selectedSource, 
          limit: 10,
          sendNotifications: true,
          userId: user?.id
        }
      });

      clearInterval(progressInterval);
      setProgress(100);

      if (error) throw error;
      
      const vulnerabilities = data.vulnerabilities || [];
      setResults(vulnerabilities);
      
      if (data.count > 0) {
        toast.success(`${data.count} vulnerabilities imported`, {
          description: "Notifications have been sent according to your preferences"
        });
      } else {
        toast.info('No new vulnerabilities found');
      }
      
      setScanComplete(true);
      
      if (onScanComplete) {
        onScanComplete();
      }
    } catch (error) {
      console.error('Scraping error:', error);
      toast.error('Failed to scrape vulnerabilities');
    } finally {
      setIsLoading(false);
      setScanInProgress(false);
    }
  };
  
  const getSelectedSource = () => {
    return sources.find(s => s.id === selectedSource) || sources[0];
  };

  return (
    <Card className="glass-card p-6 space-y-4 shadow-md">
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-xl font-semibold">Vulnerability Scanner</h2>
          <p className="text-sm text-gray-500">Scan for vulnerabilities from various sources.</p>
        </div>
        <Badge variant="outline" className="bg-blue-50 text-blue-700 border-blue-200">
          {getSelectedSource().name}
        </Badge>
      </div>
      
      <div className="space-y-4">
        <div>
          <label htmlFor="source-select" className="block text-sm font-medium mb-1">Select Vulnerability Source</label>
          <Select onValueChange={setSelectedSource} defaultValue={selectedSource}>
            <SelectTrigger id="source-select" className="w-full">
              <SelectValue placeholder="Select Source" />
            </SelectTrigger>
            <SelectContent>
              {sources.map(source => (
                <SelectItem key={source.id} value={source.id}>
                  <div className="flex items-center">
                    {source.icon}
                    {source.name}
                  </div>
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
          <p className="text-xs text-gray-500 mt-1">{getSelectedSource().description}</p>
        </div>
        
        {scanInProgress && (
          <div className="space-y-2">
            <Progress value={progress} className="w-full h-2" />
            <p className="text-xs text-center text-gray-500">{progress < 100 ? 'Scanning...' : 'Scan complete'}</p>
          </div>
        )}

        <Button 
          onClick={handleScrape} 
          disabled={isLoading}
          className="w-full"
        >
          {isLoading ? (
            <>
              <Loader className="mr-2 h-4 w-4 animate-spin" />
              Scanning for Vulnerabilities...
            </>
          ) : scanComplete ? (
            <>
              <CheckCircle2 className="mr-2 h-4 w-4" />
              Scan Again
            </>
          ) : (
            <>
              <Search className="mr-2 h-4 w-4" />
              Start Vulnerability Scan
            </>
          )}
        </Button>
      </div>

      {scanInProgress && (
        <Alert className="bg-blue-50 text-blue-800 border-blue-200">
          <Info className="h-4 w-4" />
          <span className="ml-2 text-xs">
            Scan in progress. You'll receive notifications for critical vulnerabilities according to your preferences.
          </span>
        </Alert>
      )}

      {results.length > 0 && (
        <div className="space-y-2 mt-4">
          <h3 className="text-lg font-semibold">Scan Results ({results.length})</h3>
          <div className="max-h-60 overflow-y-auto pr-2">
            {results.map((result, index) => (
              <div key={index} className="flex items-center gap-2 p-3 rounded-md bg-gray-50/50 border border-gray-200 mb-2">
                <AlertTriangle className={`h-4 w-4 ${
                  result.severity === 'critical' ? 'text-red-600' :
                  result.severity === 'high' ? 'text-orange-500' :
                  result.severity === 'medium' ? 'text-amber-500' :
                  'text-blue-500'
                } flex-shrink-0`} />
                <div className="flex flex-col">
                  <span className="text-sm font-medium">{result.title || result.cve || 'Vulnerability Found'}</span>
                  {result.description && (
                    <span className="text-xs text-gray-500 truncate max-w-full">{result.description}</span>
                  )}
                  <div className="flex gap-1 mt-1">
                    {result.severity && (
                      <Badge variant="outline" className={`
                        ${result.severity === 'critical' ? 'bg-red-100 text-red-800 border-red-200' :
                          result.severity === 'high' ? 'bg-orange-100 text-orange-800 border-orange-200' :
                          result.severity === 'medium' ? 'bg-amber-100 text-amber-800 border-amber-200' :
                          'bg-blue-100 text-blue-800 border-blue-200'}
                        px-1 py-0 text-[10px]
                      `}>
                        {result.severity}
                      </Badge>
                    )}
                    {result.cve && (
                      <Badge variant="outline" className="bg-gray-100 text-gray-700 border-gray-200 px-1 py-0 text-[10px]">
                        {result.cve}
                      </Badge>
                    )}
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}
    </Card>
  );
};

export default VulnerabilityScraper;
