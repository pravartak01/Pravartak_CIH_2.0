
import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { 
  Shield, 
  AlertTriangle, 
  Zap, 
  Target, 
  Database, 
  Activity,
  Clock,
  TrendingUp
} from 'lucide-react';
import { supabase } from '@/integrations/supabase/client';
import { toast } from "sonner";
import { useAuth } from '@/hooks/useAuth';
import { calculateCustomCVEScore, detectZeroDayVulnerabilities, prioritizeByCustomScore } from '@/utils/vulnerabilityScoring';
import { getEnabledSources } from '@/utils/vulnerabilityDataSources';
import { Alert as AlertType } from '@/types';

const EnhancedVulnerabilityScanner: React.FC = () => {
  const { user } = useAuth();
  const [isScanning, setIsScanning] = useState(false);
  const [scanProgress, setScanProgress] = useState(0);
  const [scanResults, setScanResults] = useState<any[]>([]);
  const [zeroDayAlerts, setZeroDayAlerts] = useState<AlertType[]>([]);
  const [lastScanTime, setLastScanTime] = useState<string | null>(null);
  const [scanStats, setScanStats] = useState({
    total: 0,
    critical: 0,
    high: 0,
    medium: 0,
    low: 0,
    zeroDay: 0
  });

  useEffect(() => {
    fetchExistingAlerts();
  }, []);

  const fetchExistingAlerts = async () => {
    try {
      const { data, error } = await supabase
        .from('alerts')
        .select('*')
        .order('date', { ascending: false })
        .limit(100);

      if (error) throw error;

      if (data) {
        const alerts: AlertType[] = data.map(alert => ({
          id: alert.id,
          title: alert.title,
          description: alert.description,
          severity: alert.severity as 'low' | 'medium' | 'high' | 'critical',
          date: alert.date,
          system: alert.system,
          cve: alert.cve || undefined,
          status: alert.status as 'new' | 'acknowledged' | 'resolved',
          mitigation: alert.mitigation || undefined,
          patchLink: alert.patch_link || undefined,
          details: alert.details as Record<string, any> | undefined,
        }));

        const zeroDays = detectZeroDayVulnerabilities(alerts);
        setZeroDayAlerts(zeroDays);

        const stats = {
          total: alerts.length,
          critical: alerts.filter(a => a.severity === 'critical').length,
          high: alerts.filter(a => a.severity === 'high').length,
          medium: alerts.filter(a => a.severity === 'medium').length,
          low: alerts.filter(a => a.severity === 'low').length,
          zeroDay: zeroDays.length
        };
        setScanStats(stats);
      }
    } catch (error) {
      console.error('Error fetching alerts:', error);
    }
  };

  const runEnhancedScan = async () => {
    if (!user) return;

    setIsScanning(true);
    setScanProgress(0);
    setScanResults([]);

    try {
      const enabledSources = getEnabledSources();
      const progressStep = 100 / enabledSources.length;

      for (let i = 0; i < enabledSources.length; i++) {
        const source = enabledSources[i];
        setScanProgress((i + 0.5) * progressStep);

        console.log(`Scanning source: ${source.name}`);
        
        // Call the scrape-vulnerabilities function for each source
        const { data, error } = await supabase.functions.invoke('scrape-vulnerabilities', {
          body: { 
            source: source.id,
            limit: 20,
            sendNotifications: i === enabledSources.length - 1, // Only send notifications on last scan
            userId: user.id
          }
        });

        if (error) {
          console.error(`Error scanning ${source.name}:`, error);
          continue;
        }

        if (data?.vulnerabilities) {
          setScanResults(prev => [...prev, ...data.vulnerabilities]);
        }

        setScanProgress((i + 1) * progressStep);
        
        // Add delay between sources to avoid rate limiting
        if (i < enabledSources.length - 1) {
          await new Promise(resolve => setTimeout(resolve, 1000));
        }
      }

      setLastScanTime(new Date().toISOString());
      await fetchExistingAlerts(); // Refresh the alerts
      
      toast.success(`Enhanced scan completed! Found ${scanResults.length} new vulnerabilities`);
    } catch (error) {
      console.error('Enhanced scan error:', error);
      toast.error('Enhanced scan failed. Please try again.');
    } finally {
      setIsScanning(false);
      setScanProgress(100);
    }
  };

  const getSeverityIcon = (severity: string) => {
    switch (severity) {
      case 'critical':
        return <AlertTriangle className="h-4 w-4 text-red-600" />;
      case 'high':
        return <AlertTriangle className="h-4 w-4 text-orange-500" />;
      case 'medium':
        return <Shield className="h-4 w-4 text-yellow-500" />;
      default:
        return <Shield className="h-4 w-4 text-blue-500" />;
    }
  };

  return (
    <div className="space-y-6">
      {/* Enhanced Scanner Header */}
      <Card className="glass-card">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Target className="h-5 w-5 text-primary" />
            Enhanced Security Scanner
          </CardTitle>
          <CardDescription>
            Multi-source vulnerability detection with custom scoring and zero-day identification
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          {isScanning && (
            <div className="space-y-2">
              <Progress value={scanProgress} className="w-full h-2" />
              <p className="text-xs text-center text-gray-500">
                Scanning {getEnabledSources().length} vulnerability sources...
              </p>
            </div>
          )}

          <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
            <div className="text-center p-3 bg-gray-50 rounded-lg">
              <Database className="h-6 w-6 mx-auto mb-1 text-blue-500" />
              <p className="text-sm font-medium">{getEnabledSources().length} Sources</p>
              <p className="text-xs text-gray-500">Active</p>
            </div>
            <div className="text-center p-3 bg-gray-50 rounded-lg">
              <Zap className="h-6 w-6 mx-auto mb-1 text-red-500" />
              <p className="text-sm font-medium">{scanStats.zeroDay}</p>
              <p className="text-xs text-gray-500">Zero-Day</p>
            </div>
            <div className="text-center p-3 bg-gray-50 rounded-lg">
              <Activity className="h-6 w-6 mx-auto mb-1 text-green-500" />
              <p className="text-sm font-medium">{scanStats.total}</p>
              <p className="text-xs text-gray-500">Total Alerts</p>
            </div>
          </div>

          <Button 
            onClick={runEnhancedScan} 
            disabled={isScanning}
            className="w-full"
            size="lg"
          >
            {isScanning ? (
              <>
                <Activity className="mr-2 h-4 w-4 animate-spin" />
                Enhanced Scanning...
              </>
            ) : (
              <>
                <Target className="mr-2 h-4 w-4" />
                Start Enhanced Scan
              </>
            )}
          </Button>

          {lastScanTime && (
            <div className="flex items-center justify-center gap-2 text-sm text-gray-500">
              <Clock className="h-4 w-4" />
              Last scan: {new Date(lastScanTime).toLocaleString()}
            </div>
          )}
        </CardContent>
      </Card>

      {/* Zero-Day Alerts */}
      {zeroDayAlerts.length > 0 && (
        <Card className="border-red-200 bg-red-50">
          <CardHeader>
            <CardTitle className="flex items-center gap-2 text-red-800">
              <Zap className="h-5 w-5" />
              Zero-Day Vulnerabilities Detected
            </CardTitle>
          </CardHeader>
          <CardContent>
            <Alert className="mb-4" variant="destructive">
              <AlertTriangle className="h-4 w-4" />
              <AlertDescription>
                {zeroDayAlerts.length} potential zero-day vulnerabilities require immediate attention
              </AlertDescription>
            </Alert>
            
            <div className="space-y-2">
              {zeroDayAlerts.slice(0, 3).map((alert, index) => (
                <div key={index} className="flex items-center gap-3 p-3 bg-white rounded-md border border-red-200">
                  <Zap className="h-4 w-4 text-red-500 flex-shrink-0" />
                  <div className="flex-grow">
                    <p className="text-sm font-medium text-red-800">{alert.title}</p>
                    <p className="text-xs text-red-600">{alert.system}</p>
                  </div>
                  <Badge variant="destructive" className="text-xs">
                    Zero-Day
                  </Badge>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      )}

      {/* Scan Results */}
      {scanResults.length > 0 && (
        <Card className="glass-card">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <TrendingUp className="h-5 w-5 text-primary" />
              Latest Scan Results ({scanResults.length})
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-2 max-h-60 overflow-y-auto">
              {scanResults.slice(0, 10).map((result, index) => {
                const score = result.severity ? calculateCustomCVEScore({
                  ...result,
                  id: index.toString(),
                  status: 'new' as const,
                  date: new Date().toISOString()
                }) : null;

                return (
                  <div key={index} className="flex items-center gap-3 p-3 bg-gray-50 rounded-md">
                    {getSeverityIcon(result.severity)}
                    <div className="flex-grow">
                      <p className="text-sm font-medium">{result.title || result.cve}</p>
                      <p className="text-xs text-gray-500">{result.system}</p>
                    </div>
                    <div className="text-right">
                      <Badge variant="outline" className="text-xs mb-1">
                        {result.severity}
                      </Badge>
                      {score && (
                        <p className="text-xs text-gray-500">
                          Score: {score.customScore}/10
                        </p>
                      )}
                    </div>
                  </div>
                );
              })}
            </div>
          </CardContent>
        </Card>
      )}

      {/* Data Sources Status */}
      <Card className="glass-card">
        <CardHeader>
          <CardTitle>Active Data Sources</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid gap-3">
            {getEnabledSources().map((source) => (
              <div key={source.id} className="flex items-center justify-between p-3 bg-gray-50 rounded-md">
                <div>
                  <p className="text-sm font-medium">{source.name}</p>
                  <p className="text-xs text-gray-500">{source.description}</p>
                </div>
                <Badge variant="outline" className="bg-green-100 text-green-800 border-green-200">
                  Active
                </Badge>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default EnhancedVulnerabilityScanner;
